//プレイヤークラスのインクルード
#include "CPlayer.h"
//キー入力クラスのインクルード
#include "CKey.h"
//
#include "CBullet.h"
//
#include "CTaskManager.h"
//
#include "CCollisionManager.h"
//
#include "CUtil.h"
//
#include "CEffect.h"
//
#include <math.h>
//
#include "CInput.h"

CPlayer *CPlayer::spThis = 0;

#define FIRECOUNT 15	//発射間隔

#define MOS_POS_X 400	//マウス座標のX補正
#define MOS_POS_Y 300	//マウス座標のY補正
#define MOUSE_X_LIM 1024	//マウスX座標の範囲
#define MOUSE_Y_LIM 768		//マウスY座標の範囲

CPlayer::CPlayer()
: mLine(this, &mMatrix, CVector(0.0f, 0.0f, -14.0f), CVector(0.0f, 0.0f, 17.0f))
, mLine2(this, &mMatrix, CVector(0.0f, 5.0f, -8.0f), CVector(0.0f, -3.0f, -8.0f))
, mLine3(this, &mMatrix, CVector(9.0f, 0.0f, -8.0f), CVector(-9.0f, 0.0f, -8.0f))
, mCollider(this, &mMatrix, CVector(0.0f, 0.0f, 0.0f), 0.5f)
, mFireCount(0)
{
	mTag = EPLAYER;	//タグの設定
	spThis = this;
	//テクスチャファイルの読み込み（1行64列）
	mText.LoadTexture("FontWhite.tga", 1, 64);
	//マウスカーソル座標の取得
	

}

//更新処理
void CPlayer::Update() 
{
	//Aキー入力で回転
	if (CKey::Push('A')) {
		//Y軸の回転値を増加
		mRotation.mY += 1;
	}
	if (CKey::Push('D')) {
		//Y軸の回転値を増加
		mRotation.mY -= 1;
	}
	//上矢印キー入力で前進
	if (CKey::Push(VK_UP)) {
		//Z軸方向に1進んだ値を回転移動させる
		mPosition = CVector(0.0f, 0.0f, 1.0f) * mMatrix;
	}
	//Sキー入力で上向き
	if (CKey::Push('S')) {
		//X軸の回転値を減算
		mRotation.mX -= 1;
	}
	//Wキー入力で上向き
	if (CKey::Push('W')) {
		//X軸の回転値を加算
		mRotation.mX += 1;
	}

	if (mFireCount > 0)
	{
		mFireCount--;
	}

	//スペースキー入力で弾発射
	if (CKey::Push(VK_SPACE) && mFireCount == 0) {
		mFireCount = FIRECOUNT;
		CBullet *bullet = new CBullet();
		bullet->Set(0.1f, 1.5f);
		bullet->mPosition = CVector(0.0f, 0.0f, 10.0f) * mMatrix;
		bullet->mRotation = mRotation;
		bullet->Update();
//		TaskManager.Add(bullet);
	}
	//マウスカーソル座標の取得
	CInput::GetMousePosD(&mMx, &mMy);

	int mx, my;//マウスカーソル座標取得用
		//マウスカーソル座標の取得
		CInput::GetMousePos(&mx, &my);

		//マウスクリック検出
		if (CKey::Push(VK_LBUTTON))
		{
			//マウス座標コンソール出力
			printf("%d,%d\n", mx, my);
		}

		//ゲーム画面中心からの座標へ変換する
		mx -= MOS_POS_X;
		my = MOS_POS_Y - my;

		//プレイヤーとマウス座標との差を求める
		mx -= x;
		my -= y;

		//距離が遠いほうへ移動させる
		if (abs(mx) > abs(my))
		{
			//X軸で移動
			if (mx < 0)
			{
				//左へ移動
				x -= 3;
				mFx = -1;
				mFy = 0;
			}
			else
			{
				//右へ移動
				x += 3;
				mFx = 1;
				mFy = 0;
			}
		}

		else
		{
			//Y軸で移動
			if (my < 0)
			{
				//下へ移動
				y -= 3;
				mFx = 0;
				mFy = -1;
			}
			else
			{
				//上へ移動
				y += 3;
				mFx = 0;
				mFy = 1;
			}
		}

		//X軸方向の移動
//前回より右にあれば右へ移動
		if (mMx < mx)
		{
			x += mx - mMx;
		}
		else if (mMx > mx)
		{
			x += mx - mMx;
		}

		//Y軸方向の移動
		//前回より下にあれば下へ移動
		if (mMy < my)
		{
			y -= my - mMy;
		}
		else if (mMy > my)
		{
			y -= my - mMy;
		}

		//左右の範囲をでると反対端へ移動させる
		if (my > MOUSE_Y_LIM)
		{
			my = 1;
		}
		else if (my <= 0)
		{
			my = MOUSE_Y_LIM - 1;
		}

		//座標を退避する
		mMx = mx;
		mMy = my;

		//マウスカーソル座標の更新
		CInput::SetMousePosD(mx, my);


	//CTransformの更新
	CTransform::Update();
}

void CPlayer::Collision(CCollider *m, CCollider *o) {
	//相手がサーチの時は戻る
	if (o->mTag == CCollider::ESEARCH)
	{
		return;
	}
	//自身のコライダタイプの判定
	switch (m->mType) {
	case CCollider::ELINE://線分コライダ
		//相手のコライダが三角コライダの時
		if (o->mType == CCollider::ETRIANGLE) {
			CVector adjust;//調整用ベクトル
			//三角形と線分の衝突判定
			CCollider::CollisionTriangleLine(o, m, &adjust);
			//位置の更新(mPosition + adjust)
			mPosition = mPosition - adjust * -1;
			//行列の更新
			CTransform::Update();
		}
		break;
	case CCollider::ESPHERE:
		//相手のコライダが球コライダの時
		if (o->mType == CCollider::ESPHERE) {
			if (CCollider::Collision(m, o))
			{
				//エフェクト生成
				new CEffect(o->mpParent->mPosition, 1.0f, 1.0f, "exp.tga", 4, 4, 2);
			}
		}
		break;
	}
}
//衝突処理
void CPlayer::TaskCollision()
{
	//コライダの優先度変更
	mLine.ChangePriority();
	mLine2.ChangePriority();
	mLine3.ChangePriority();
	mCollider.ChangePriority();
	//衝突処理を実行
	CCollisionManager::Get()->Collision(&mLine, COLLISIONRANGE);
	CCollisionManager::Get()->Collision(&mLine2, COLLISIONRANGE);
	CCollisionManager::Get()->Collision(&mLine3, COLLISIONRANGE);
	CCollisionManager::Get()->Collision(&mCollider, COLLISIONRANGE);
}

void CPlayer::Render()
{
	//親の描画処理
	CCharacter::Render();

	//2Dの描画開始
	CUtil::Start2D(-400, 400, -300, 300);
	//描画色の設定（緑色の半透明）
	glColor4f(0.0f, 1.0f, 0.0f, 0.4f);
	//文字列編集エリアの作成
	char buf[64];

	//Y座標の表示
	//文字列の設定
	sprintf(buf, "PY:%7.2f", mPosition.mY);
	//文字列の描画
	mText.DrawString(buf, 100, 30, 8, 16);

	//X軸回転値の表示
	//文字列の設定
	sprintf(buf, "RX:%7.2f", mRotation.mX);
	//文字列の描画
	mText.DrawString(buf, 100, 0, 8, 16);
	
	//Y軸回転値の表示
	//文字列の設定
	sprintf(buf, "RY:%7.2f", mRotation.mY);
	//文字列の描画
	mText.DrawString(buf, 100, -100, 8, 16);

	//2Dの描画終了
	CUtil::End2D();

}